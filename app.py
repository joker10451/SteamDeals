import streamlit as st
import plotly.graph_objects as go
from datetime import datetime, timedelta
from steam_api import SteamMarketAPI
from data_manager import DataManager
import pandas as pd

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
steam_api = SteamMarketAPI()
data_manager = DataManager()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–µ–Ω Steam",
    page_icon="üìà",
    layout="wide"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üìà –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ü–µ–Ω Steam Market")

# –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
tab1, tab2 = st.tabs(["üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤", "üí∞ –í—ã–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"])

with tab1:
    # –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    search_query = st.text_input("üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤", key="search")
    if search_query:
        with st.spinner("–ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤..."):
            items = steam_api.search_items(search_query)
            if items:
                st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
                for item in items:
                    col1, col2, col3 = st.columns([3, 2, 1])
                    with col1:
                        st.write(item['name'])
                    with col2:
                        st.write(f"–¶–µ–Ω–∞: {item.get('price', '–ù/–î')} ‚ÇΩ")
                    with col3:
                        if st.button("–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å", key=f"watch_{item['name']}"):
                            price = steam_api._parse_price(item.get('price', '0'))
                            data_manager.add_watched_item(item['name'], price)
                            st.success("–ü—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ!")
                            st.rerun()
            else:
                st.warning("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    st.subheader("üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã")
    watched_items = data_manager.get_watched_items()

    if not watched_items:
        st.info("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
    else:
        # –§–∏–ª—å—Ç—Ä—ã (unchanged from original)
        min_price_watched = st.slider("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ (‚ÇΩ)", 0, 10000, 0, key="min_price_watched")
        max_price_watched = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ (‚ÇΩ)", 0, 10000, 10000, key="max_price_watched")

        for item_name in watched_items:
            item_data = data_manager.watched_items[item_name]
            current_price_data = steam_api.get_item_price(item_name)

            if current_price_data and 'lowest_price' in current_price_data:
                current_price = steam_api._parse_price(current_price_data['lowest_price'])

                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã (unchanged from original)
                if current_price < min_price_watched or current_price > max_price_watched:
                    continue

                st.write("---")
                col1, col2, col3 = st.columns([3, 2, 1])

                with col1:
                    st.write(f"**{item_name}**")
                with col2:
                    price_diff = current_price - item_data['initial_price']
                    price_diff_percent = (price_diff / item_data['initial_price']) * 100

                    st.write(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f} ‚ÇΩ")
                    st.write(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {price_diff_percent:+.2f}%")
                with col3:
                    if st.button("–£–¥–∞–ª–∏—Ç—å", key=f"remove_{item_name}"):
                        data_manager.remove_watched_item(item_name)
                        st.rerun()

                # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω (unchanged from original)
                price_history = item_data['price_history']
                if price_history:
                    dates = [datetime.fromisoformat(date) for date, _ in price_history]
                    prices = [price for _, price in price_history]

                    fig = go.Figure()
                    fig.add_trace(go.Scatter(
                        x=dates,
                        y=prices,
                        mode='lines+markers',
                        name='–¶–µ–Ω–∞'
                    ))

                    fig.update_layout(
                        title=f"–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω: {item_name}",
                        xaxis_title="–î–∞—Ç–∞",
                        yaxis_title="–¶–µ–Ω–∞ (‚ÇΩ)",
                        height=400
                    )

                    st.plotly_chart(fig, use_container_width=True)

with tab2:
    st.subheader("üí∞ –í—ã–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ (modified from edited)
    col1, col2, col3 = st.columns(3)
    with col1:
        min_profit = st.slider("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (%)", 1, 100, 5)
    with col2:
        min_volume = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂", 1, 1000, 10)
    with col3:
        max_items = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", 100, 1000, 500)

    if st.button("üîÑ –ù–∞–π—Ç–∏ –≤—ã–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã"):
        with st.spinner("–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è"):
            profitable_items = steam_api.find_profitable_items(min_profit, max_items)

            if profitable_items:
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É –ø—Ä–æ–¥–∞–∂ (modified from edited)
                filtered_items = [
                    item for item in profitable_items
                    if item['volume'] >= min_volume
                ]

                if filtered_items:
                    st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(filtered_items)} –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π!")

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (modified from edited)
                    df = pd.DataFrame(filtered_items)
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å", f"{df['profit_percent'].mean():.1f}%")
                    with col2:
                        st.metric("–°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂", f"{df['volume'].mean():.0f}")
                    with col3:
                        st.metric("–°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", f"{df['volatility'].mean():.1f}%")

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–µ–¥–º–µ—Ç (modified from edited)
                    for item in filtered_items:
                        with st.container():
                            st.write("---")
                            col1, col2, col3, col4 = st.columns([3, 2, 2, 1])

                            with col1:
                                st.write(f"**{item['name']}**")
                            with col2:
                                st.write(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {item['current_price']:.2f} ‚ÇΩ")
                                st.write(f"–ú–µ–¥–∏–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: {item['median_price']:.2f} ‚ÇΩ")
                            with col3:
                                st.write(f"–ü—Ä–∏–±—ã–ª—å: {item['profit_percent']:.1f}%")
                                st.write(f"–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂: {item['volume']}")
                            with col4:
                                if st.button("–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å", key=f"watch_profitable_{item['name']}"):
                                    data_manager.add_watched_item(item['name'], item['current_price'])
                                    st.success("–ü—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ!")
                                    st.rerun()
                else:
                    st.warning("–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂.")
            else:
                st.warning("–í—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω (unchanged from original, but with price parsing improvement)
if watched_items:
    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Ü–µ–Ω—ã"):
        with st.spinner("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω..."):
            for item_name in watched_items:
                price_data = steam_api.get_item_price(item_name)
                if price_data and 'lowest_price' in price_data:
                    current_price = steam_api._parse_price(price_data['lowest_price'])
                    data_manager.update_price(item_name, current_price)
        st.success("–¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        st.rerun()